--1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과 주민번호, 부서 명, 직급 조회
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
    AND E.JOB_CODE = J.JOB_CODE
    AND SUBSTR(EMP_NO, 1, 2) BETWEEN 70 AND 79
    AND SUBSTR(EMP_NO, 8, 1) IN ('2', '4')
    AND SUBSTR(EMP_NAME, 1, 1) = '전';

--2. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
SELECT EMP_ID, EMP_NAME, 124 - SUBSTR(EMP_NO, 1, 2) AS "나이", DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
    AND E.JOB_CODE = J.JOB_CODE
    AND EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RRRR')) = (SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RRRR')))
                                                                                                FROM EMPLOYEE);

--3. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE
    AND EMP_NAME LIKE '%형%';

--4. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
    AND E.JOB_CODE = J.JOB_CODE
    AND (DEPT_CODE = 'D5' OR DEPT_CODE = 'D6');

--5. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
WHERE (E.DEPT_CODE = D.DEPT_ID)
    AND (D.LOCATION_ID = L.LOCAL_CODE)
    AND BONUS IS NOT NULL;

--6. 사원 명, 직급 명, 부서 명, 지역 명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

--7. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_NAME = '한국' OR NATIONAL_NAME = '일본';

--8. 한 사원과 같은 부서에서 일하는 사원의 이름 조회
SELECT M.EMP_NAME, E.EMP_NAME
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE M ON (E.DEPT_CODE = M.DEPT_CODE);

--9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급 명, 급여 조회(NVL 이용)
SELECT EMP_NAME, JOB_NAME, (SALARY + (SALARY * NVL(BONUS, 0))) * 12
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE BONUS IS NULL
    AND (DEPT_CODE = 'J4' OR DEPT_CODE = 'J7');

--10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE ROWNUM <= 5
ORDER BY (SALARY + (SALARY * NVL(BONUS, 0))) * 12 DESC;

--11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
--11-1. JOIN과 HAVING 사용
SELECT DEPT_TITLE, SUM(SALARY) AS "급여"
FROM EMPLOYEE, DEPARTMENT
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > 0.2 * (SELECT SUM(SALARY)
                            FROM EMPLOYEE);

--11-2. 인라인 뷰 사용
SELECT *
FROM (SELECT DEPT_TITLE AS "부서명", SUM(SALARY) AS "급여"
        FROM EMPLOYEE, DEPARTMENT
        WHERE DEPT_CODE = DEPT_ID
        GROUP BY DEPT_TITLE)
WHERE 급여 > 0.2 * (SELECT SUM(SALARY)
                    FROM EMPLOYEE);

--11-3. WITH 사용
WITH DEPT AS (SELECT DEPT_TITLE AS "부서명", SUM(SALARY) AS "급여"
                FROM EMPLOYEE, DEPARTMENT
                WHERE DEPT_CODE = DEPT_ID
                GROUP BY DEPT_TITLE)
SELECT *
FROM DEPT
WHERE 급여 > 0.2 * (SELECT SUM(SALARY)
                    FROM EMPLOYEE);

--12. 부서 명과 부서 별 급여 합계 조회
SELECT DEPT_TITLE, SUM(SALARY) AS "급여"
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
GROUP BY DEPT_TITLE;

--13. WITH를 이용하여 급여 합과 급여 평균 조회
--SELECT SUM(SALARY), ROUND(AVG(SALARY))
--FROM EMPLOYEE;
WITH SAL AS (SELECT SUM(SALARY), ROUND(AVG(SALARY))
                FROM EMPLOYEE)
SELECT *
FROM SAL;